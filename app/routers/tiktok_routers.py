from fastapi import APIRouter, Form, BackgroundTasks
from fastapi.responses import FileResponse, JSONResponse
import re
import os
from datetime import datetime
from app.services.get_secuid import get_secuid
from app.services.get_posts import fetch_all_posts
from app.services.get_comments import fetch_comments
from app.services.get_followers import fetch_followers
from app.services.get_following import fetch_following
from app.utils.excel_utils import save_to_excel

router = APIRouter()

@router.post("/scrape_tiktok_data/")
async def scrape_tiktok_data(
    background_tasks: BackgroundTasks,
    tiktok_account: str = Form(...),
    data_type: list[str] = Form([])
):
    try:
        # √âtape 1 : Extraire le nom d'utilisateur de l'URL TikTok
        match = re.search(r"@([a-zA-Z0-9_.-]+)", tiktok_account)
        username = match.group(1) if match else "default_user"
        print(f"Nom d'utilisateur extrait ou par d√©faut : {username}")

        # √âtape 2 : R√©cup√©rer le secUid
        secuid = get_secuid(tiktok_account)
        print(f"secUid r√©cup√©r√© : {secuid}")
        if "Error" in secuid or "not found" in secuid:
            return JSONResponse(
                content={"error": f"Erreur lors de la r√©cup√©ration du secUid : {secuid}"},
                status_code=400
            )

        # √âtape 3 : Initialiser les donn√©es collect√©es
        posts, followers, following_data, user_info, all_comments = None, None, None, None, None

        if "comments" in data_type and "posts" in data_type:
            print("üì• R√©cup√©ration des publications et des commentaires...")
            posts_data = fetch_all_posts(secuid)
            if posts_data and posts_data.get("posts"):
                user_info = posts_data.get("user", {})
                posts = posts_data["posts"]

                all_comments = []
                for post in posts:
                    if post.get("commentCount"):
                        comments = fetch_comments(post["id"])
                        all_comments.extend(comments)

                print(f"‚úÖ Total des commentaires r√©cup√©r√©s : {len(all_comments)}")

        elif "posts" in data_type:
            print("üì• R√©cup√©ration des publications...")
            posts_data = fetch_all_posts(secuid)
            if posts_data and posts_data.get("posts"):
                user_info = posts_data.get("user", {})
                posts = posts_data["posts"]

        if "followers" in data_type:
            print("üì• R√©cup√©ration des followers...")
            followers = fetch_followers(secuid)

        if "following" in data_type:
            print("üì• R√©cup√©ration des utilisateurs suivis...")
            following_data = fetch_following(secuid)

        # √âtape 5 : G√©n√©rer le nom du fichier bas√© sur l'utilisateur
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = f"{username}_{timestamp}.xlsx"

        # √âtape 6 : Sauvegarder les donn√©es dans un fichier Excel
        save_to_excel(posts, followers, following_data, user_info, all_comments, file_name)

        # √âtape 7 : Supprimer le fichier temporaire apr√®s le t√©l√©chargement
        background_tasks.add_task(os.remove, file_name)

        # Retourner le fichier en r√©ponse
        return FileResponse(
            path=file_name,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename=file_name,
        )

    except Exception as e:
        print(f"Erreur captur√©e : {str(e)}")  # D√©bogage
        return JSONResponse(content={"error": f"Erreur lors du traitement des donn√©es : {str(e)}"}, status_code=500)